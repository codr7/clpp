* add read-sexpr
** add sexpr form
** add emit-sexpr-lisp method
** lookup name in ns if identifier
* bind +/- (clpp+/-) in std
* bind head/tail in std
** add head/tail methods
** #'first/rest
* add bool type
** bind T
* add read-vect
** [1 2 3]
** add vect type
** add vect form
* add list type
** 1:2:3:_
* add read/emit/eval error types with location
* add func/lambda macro
** generate lambda if no id
** otherwise defmethod
* add list type?
** 1:2:3:_
** add head/tail to std
* comma creates tuples
* convert type decls
** (declare ([type] ...)) for args/locals
** (declaim (type (string) *name*)) for globals
** (declare (ftype (function (integer list) t) nth)) for functions

(fexp foo (x, y: Any): Any
  (or x! y!))

* use ' exclusively for quoting
** add quote reader
** add quote-value method
** add sym type
** add form type

* allow typed macro args
** emit when types match

`foo

(macro foo (x, y:Any)
  `(or @x @y))

* unify =
** special case at compile time
** check values for arrays / hash tables

* unify length
** special case at compile time

* add set/map syntax
** {1 2 3:4}
** use rb
